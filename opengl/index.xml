<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opengls on Lost in coding</title>
    <link>https://zzakafool.github.io/opengl/</link>
    <description>Recent content in Opengls on Lost in coding</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jun 2020 23:36:42 +0800</lastBuildDate>
    
	<atom:link href="https://zzakafool.github.io/opengl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《OpenGL编程指南》中关于Uniform_Block的部分错误</title>
      <link>https://zzakafool.github.io/opengl/opengl%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%E4%B8%AD%E5%85%B3%E4%BA%8Euniform_block%E7%9A%84%E9%83%A8%E5%88%86%E9%94%99%E8%AF%AF/</link>
      <pubDate>Fri, 19 Jun 2020 23:36:42 +0800</pubDate>
      
      <guid>https://zzakafool.github.io/opengl/opengl%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%E4%B8%AD%E5%85%B3%E4%BA%8Euniform_block%E7%9A%84%E9%83%A8%E5%88%86%E9%94%99%E8%AF%AF/</guid>
      <description>碎碎念 在《OpenGL编程指南(第九版)》第2章的2.4节(数据块接口)中，作者介绍了Uniform Block的概念以及部分API，说实话，第一遍看的时候确实没看懂多少内容，Uniform Block咋用也不知道。不过还好早就有了心理准备，本来在买书的时候就知道红宝书是被大家称为字典书的。所幸看完2.4节，作者提供了一个例程，作者通过一个例子，介绍了Uniform Block的大致使用流程，这段代码我抄完后测试能够正常运行，之后我尝试对代码进行修改，打算再加入一个Unifrom Block，通过一个Buffer Object进行传值，然后&amp;hellip;&amp;hellip;然后就挖了一手好坑，改了一下午BUG。最后我发现对于Buffer Object还是理解有问题， 而且《OpenGL编程指南》中关于Uniform Block的API部分的理解是有问题的。
问题分析 下面记录下我开始进行尝试的代码。
#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstdlib&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;GL/glew.h&amp;gt;#include &amp;#34;LoadShaders.h&amp;#34;#include &amp;lt;GLFW/glfw3.h&amp;gt;using namespace std; enum VAO_IDs{Triangles, NumVAOs}; enum Buffer_IDs{ArrayBuffer, NumBuffers}; enum Attrb_IDs{vPos = 0}; GLuint VAOs[NumVAOs]; GLuint Buffers[NumBuffers]; const GLuint NumVertices = 3; size_t TypeSize(GLenum type) { size_t size; #define CASE(Enum, Count, Type) \ case Enum : size = Count * sizeof(Type); break  switch(type){ CASE(GL_FLOAT, 1, GLfloat); CASE(GL_FLOAT_VEC2, 2, GLfloat); CASE(GL_FLOAT_VEC3, 3, GLfloat); CASE(GL_FLOAT_VEC4, 4, GLfloat); CASE(GL_INT, 1, GLint); CASE(GL_INT_VEC2, 2, GLint); CASE(GL_INT_VEC3, 3, GLint); CASE(GL_INT_VEC4, 4, GLint); CASE(GL_UNSIGNED_INT, 1, GLuint); CASE(GL_UNSIGNED_INT_VEC2, 2, GLuint); CASE(GL_UNSIGNED_INT_VEC3, 3, GLuint); CASE(GL_UNSIGNED_INT_VEC4, 4, GLuint); CASE(GL_BOOL, 1, GLboolean); CASE(GL_BOOL_VEC2, 2, GLboolean); CASE(GL_BOOL_VEC3, 3, GLboolean); CASE(GL_BOOL_VEC4, 4, GLboolean); CASE(GL_FLOAT_MAT2, 4, GLfloat); CASE(GL_FLOAT_MAT2x3, 6, GLfloat); CASE(GL_FLOAT_MAT2x4, 8, GLfloat); CASE(GL_FLOAT_MAT3, 9, GLfloat); CASE(GL_FLOAT_MAT3x2, 6, GLfloat); CASE(GL_FLOAT_MAT3x4, 12, GLfloat); CASE(GL_FLOAT_MAT4, 16, GLfloat); CASE(GL_FLOAT_MAT4x2, 8, GLfloat); CASE(GL_FLOAT_MAT4x3, 12, GLfloat); #undef CASE  default: fprintf(stderr, &amp;#34;unknow type: 0x%x\n&amp;#34;, type); exit(EXIT_FAILURE); break; } return size; } void init(void) { GLuint program; glClearColor(1, 0, 0, 1); ShaderInfo shaders[] = { {GL_VERTEX_SHADER, &amp;#34;.</description>
    </item>
    
    <item>
      <title>从零开始的OpenGL学习笔记(一)</title>
      <link>https://zzakafool.github.io/opengl/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84opengl%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Thu, 18 Jun 2020 12:46:54 +0800</pubDate>
      
      <guid>https://zzakafool.github.io/opengl/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84opengl%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>写在前头： 既然要开始学着写博客，那就不如从最想学的技术开始写起。打小就喜欢游戏，在见识了现代游戏各式华丽的特效和不同风格的游戏画面后，早就想学习CG方面的相关技术。之前也听说过OpenGL，照着一些教程写过一点小程序，但一直都没有系统地学习整理过这方面的内容。这篇文章是在学习《OpenGL编程指南(第九版)》时,整理的读书笔记，我不希望自己将笔记写成一种抄书的感觉，那这样我不如下次再重新翻翻书，写得比我自己抄的更好。我希望笔记内容更多的是对书本知识的扩充，对一些繁杂内容的概括，对一些知识的自我理解(就算是有问题的也好，之后再来补充嘛~)。
1 OpenGL初识 1.1 什么是OpenGL OpenGL是一种应用程序编程接口(API)，它是一种可以对图形硬件设备特性进行访问的软件库，程序员在开发3D图形程序时，可以通过OpenGL的接口，对图形硬件进行操作，进而实现渲染功能。几个特点概括:
 OpenGL是一个开放的硬件无关的接口，我们在使用时不需要考虑设备的操作系统或视窗系统的具体实现，实现OpenGL的方式由设备厂商来确定，可以通过硬件或者软件的形式来实现，在现代的实现方案中，OpenGL往往通过硬件形式，在GPU中实现。 OpenGL是使用“客户端-服务器”的形式实现的。我们编写的程序可以看做客户端，而计算机图形硬件厂商提供的OpenGL实现可以看做服务端(我们通过OpenGL提供的函数向图形硬件发起服务请求)。 OpenGL是基于“光栅化”的系统，“光栅化”是计算机图形学中实现渲染(三维模型到二维图像)的一种方式，但是图形学中渲染的方式不止这一种，比如光线追踪等技术。 OpenGL中有Shader的概念，Shader可以看做是图形硬件执行的一种特殊的程序，它是硬件设备提供给程序开发人员的自定义接口(通过脚本语言实现shader程序，在渲染管线的特定时期执行对应的shader程序，类似于钩子函数)  1.2 OpenGL程序初探 这一节是编译和解释OpenGL红宝书上的第一个程序，很多人在编译这个程序时遇上了各种各样的问题，加上这个程序的写法又很有技巧性，很容易让人望而生畏，所以这也是这本书里面的第一个小难关。 相关库的编译就不在多说了，网上可以找到很多的教程,如果是Linux用户，也可以直接通过包管理工具安装相应的库，我在编译时使用的是Manjaro,直接通过pacman和yay就能下载到对应的glfw3和glew库(我在编译这个程序时将书上用的gl3w库换成了glew,原来用过而已)。 趁此机会，我还学习了下cmake的用法，利用cmake来组织这个程序，下面是我修改的部分代码的内容。
c++代码， triangle.cpp
#include &amp;lt;iostream&amp;gt;#include &amp;lt;GL/glew.h&amp;gt;#include &amp;#34;LoadShaders.h&amp;#34;#include &amp;lt;GLFW/glfw3.h&amp;gt;using namespace std; enum VAO_IDs{Triangles, NumVAOs}; enum Buffer_IDs{ArrayBuffer, NumBuffers}; enum Attrb_IDs{vPosition = 0}; GLuint VAOs[NumVAOs]; GLuint Buffers[NumBuffers]; const GLuint NumVertices = 6; void init(void) { static const GLfloat vertices[NumVertices][2]={ {-0.90, -0.90}, { 0.85, -0.90}, {-0.90, 0.85}, { 0.90, -0.85}, { 0.90, 0.90}, {-0.85, 0.90}, }; glCreateBuffers(NumBuffers, Buffers); glNamedBufferStorage(Buffers[ArrayBuffer], sizeof(vertices), vertices, 0); ShaderInfo shaders[] = { {GL_VERTEX_SHADER, &amp;#34;.</description>
    </item>
    
  </channel>
</rss>